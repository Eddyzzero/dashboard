rules_version = "2";

service cloud.firestore {
  match /databases/{database}/documents {
    // Fonction helper pour vérifier si l'utilisateur est connecté
    function isAuthenticated() {
      return request.auth != null;
    }

    // Fonction helper pour vérifier si l'utilisateur accède à ses propres données
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Fonction helper pour valider une transaction
    function isValidTransaction() {
      let incoming = request.resource.data;
      return incoming.size() == 7 && // nombre exact de champs
        incoming.date is timestamp &&
        incoming.amount is number && incoming.amount > 0 &&
        incoming.category is string && incoming.category.size() > 0 &&
        incoming.type in ['expense', 'income'] &&
        incoming.note is string &&
        incoming.createdAt is timestamp &&
        incoming.updatedAt is timestamp;
    }

    // Règles pour la collection users et sous-collection transactions
    match /users/{userId} {
      // Protection du document utilisateur lui-même si nécessaire
      allow read, write: if isOwner(userId);

      match /transactions/{transactionId} {
        // Lecture : l'utilisateur ne peut lire que ses propres transactions
        allow read: if isOwner(userId);

        // Création : valider la structure et les données
        allow create: if isOwner(userId) && isValidTransaction();

        // Mise à jour : vérifier que seuls les champs autorisés sont modifiés
        allow update: if isOwner(userId) 
          && isValidTransaction()
          && request.resource.data.createdAt == resource.data.createdAt; // empêcher la modification de createdAt

        // Suppression : uniquement par le propriétaire
        allow delete: if isOwner(userId);
      }
    }
  }
}
